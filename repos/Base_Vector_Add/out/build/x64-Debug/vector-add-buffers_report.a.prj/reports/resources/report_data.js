var areaJSON={"columns":["", "ALUTs", "FFs", "RAMs", "DSPs", "MLABs", "Details"], "debug_enabled":"true", "type":"module", "total_percent":[0.396945, 0.278633, 0.147578, 0.112518, 0], "total":[2275, 2876, 8, 0, 22], "name":"Kernel System", "max_resources":[974400, 1948800, 7110, 4510, 48720], "children":[{"name":"\'lambda\'(auto)", "compute_units":1, "type":"function", "total_percent":[0.396945, 0.278633, 0.147578, 0.112518, 0], "total_kernel_resources":[2275, 2876, 8, 0, 22], "details":[{"type":"text", "text":"Number of compute units: 1"}, {"type":"brief", "text":"1 compute unit."}], "children":[{"name":"Function overhead", "type":"resource", "data":[1463, 1467, 0, 0, 6], "details":[{"type":"text", "text":"Kernel dispatch logic."}, {"type":"brief", "text":"Kernel dispatch logic."}]}, {"name":"\'lambda\'(auto).B0", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[77, 505, 2, 0, 0], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[77, 505, 2, 0, 0]}]}, {"name":"Cluster logic", "type":"resource", "data":[147, 256, 6, 0, 2], "details":[{"type":"brief", "text":"Logic required to efficiently support sets of operations that do not stall"}, {"type":"text", "text":"Logic required to efficiently support sets of operations that do not stall. This area cannot be affected directly."}]}, {"name":"Computation", "type":"resource", "children":[{"name":"handler.hpp:1202 > vector-add-buffers.cpp:87", "type":"resource", "data":[588, 648, 0, 0, 14], "debug":[[{"filename":"C:\\PROGRA~2\\Intel\\oneAPI\\compiler\\latest\\windows\\bin-llvm\\..\\include\\sycl/handler.hpp", "line":1202}, {"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":1, "data":[32, 0, 0, 0, 0]}, {"name":"Load", "type":"resource", "count":2, "data":[464, 376, 0, 0, 10], "details":[{"type":"text", "text":"Load uses a Pipelined LSU"}, {"type":"brief", "text":"Pipelined LSU"}]}, {"name":"Store", "type":"resource", "count":1, "data":[92, 272, 0, 0, 4], "details":[{"type":"text", "text":"Store uses a Pipelined LSU"}, {"type":"brief", "text":"Pipelined LSU"}]}], "replace_name":"true"}]}]}]}]};
var area_srcJSON={"children":[{"children":[{"data":[147,256,6,0,2],"details":[{"text":"Feedback+Cluster logic","type":"brief"}],"name":"Data control overhead","type":"resource"},{"data":[1463,1467,0,0,6],"details":[{"text":"Kernel dispatch logic.","type":"text"},{"text":"Kernel dispatch logic.","type":"brief"}],"name":"Function overhead","type":"resource"},{"children":[{"count":"1","data":[77,505,2,0,0],"debug":[[{"filename":"","line":0}]],"name":"State","type":"resource"}],"data":[77,505,2,0,0],"name":"No Source Line","type":"resource"},{"children":[{"children":[{"count":1,"data":[32,0,0,0,0],"debug":[[{"filename":"C","line":"\\PROGRA~2\\Intel\\oneAPI\\compiler\\latest\\windows\\bin-llvm\\..\\include\\sycl/handler.hpp"}]],"name":"32-bit Integer Add","type":"resource"},{"count":2,"data":[464,376,0,0,10],"debug":[[{"filename":"C","line":"\\PROGRA~2\\Intel\\oneAPI\\compiler\\latest\\windows\\bin-llvm\\..\\include\\sycl/handler.hpp"}]],"name":"Load","type":"resource"},{"count":1,"data":[92,272,0,0,4],"debug":[[{"filename":"C","line":"\\PROGRA~2\\Intel\\oneAPI\\compiler\\latest\\windows\\bin-llvm\\..\\include\\sycl/handler.hpp"}]],"name":"Store","type":"resource"}],"data":[588,648,0,0,14],"debug":[[{"filename":"C:\\PROGRA~2\\Intel\\oneAPI\\compiler\\latest\\windows\\bin-llvm\\..\\include\\sycl/handler.hpp","line":1202},{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp","line":87}]],"name":"handler.hpp:1202 > vector-add-buffers.cpp:87","replace_name":true,"type":"resource"}],"data":[588,648,0,0,14],"debug":[[{"filename":"C:\\PROGRA~2\\Intel\\oneAPI\\compiler\\latest\\windows\\bin-llvm\\..\\include\\sycl/handler.hpp","line":1202}]],"name":"C:\\PROGRA~2\\Intel\\oneAPI\\compiler\\latest\\windows\\bin-llvm\\..\\include\\sycl/handler.hpp:1202","replace_name":"true","type":"resource"}],"compute_units":1,"data":[2275,2876,8,0,22],"details":[{"text":"Number of compute units: 1","type":"text"},{"text":"1 compute unit.","type":"brief"}],"name":"\'lambda\'(auto)","total_kernel_resources":[2275,2876,8,0,22],"total_percent":[0.396945,0.278633,0.147578,0.112518,0],"type":"function"}],"columns":["","ALUTs","FFs","RAMs","DSPs","MLABs","Details"],"data":[2275,2876,8,0,22],"debug_enabled":"true","max_resources":[974400,1948800,7110,4510,48720],"name":"Kernel System","total":[2275,2876,8,0,22],"total_percent":[0.396945,0.278633,0.147578,0.112518,0],"type":"module"};
var mavJSON={"nodes":[{"type":"kernel", "id":2, "name":"\'lambda\'(auto)", "children":[{"type":"bb", "id":3, "name":"\'lambda\'(auto).B0", "children":[{"type":"inst", "id":4, "name":"Load", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Pipelined", "Stall-free":"No", "Start Cycle":"33", "Latency":"31", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:///C:/Program Files (x86)/Intel/oneAPI/compiler/latest/windows/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":5, "name":"Load", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Pipelined", "Stall-free":"No", "Start Cycle":"33", "Latency":"31", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:///C:/Program Files (x86)/Intel/oneAPI/compiler/latest/windows/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":6, "name":"Store", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Pipelined", "Stall-free":"No", "Stores to":"_arg_sum", "Start Cycle":"95", "Latency":"31", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:///C:/Program Files (x86)/Intel/oneAPI/compiler/latest/windows/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":7, "name":"Begin", "details":[{"type":"table", "Start Cycle":"0", "Latency":"1"}]}, {"type":"inst", "id":8, "name":"End", "details":[{"type":"table", "Start Cycle":"126", "Latency":"1"}]}], "details":[{"type":"table", "Latency":"126"}]}, {"type":"csr", "id":9, "name":"Register Map", "debug":[[{"filename":"vector_add_buffers_report_a.prj/ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E_csr.hpp", "line":1}]], "children":[{"type":"interface", "id":10, "name":"start", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]]}, {"type":"interface", "id":11, "name":"done", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]]}, {"type":"interface", "id":12, "name":"busy", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]]}, {"type":"interface", "id":13, "name":"arg_sum", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Alignment":"4"}]}, {"type":"interface", "id":14, "name":"arg_sum1", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E"}]}, {"type":"interface", "id":15, "name":"arg_sum2", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E"}]}, {"type":"interface", "id":16, "name":"arg_sum3", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E"}]}, {"type":"interface", "id":17, "name":"arg_a", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Alignment":"4"}]}, {"type":"interface", "id":18, "name":"arg_a4", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E"}]}, {"type":"interface", "id":19, "name":"arg_a5", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E"}]}, {"type":"interface", "id":20, "name":"arg_a6", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E"}]}, {"type":"interface", "id":21, "name":"arg_b", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Alignment":"4"}]}, {"type":"interface", "id":22, "name":"arg_b7", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E"}]}, {"type":"interface", "id":23, "name":"arg_b8", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E"}]}, {"type":"interface", "id":24, "name":"arg_b9", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E"}]}]}, {"type":"interface", "id":25, "name":"__acl_global_size_0", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_size_0"}]}, {"type":"interface", "id":26, "name":"__acl_global_size_1", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_size_1"}]}, {"type":"interface", "id":27, "name":"__acl_global_size_2", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_size_2"}]}, {"type":"interface", "id":28, "name":"__acl_global_id_0", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_id_0"}]}, {"type":"interface", "id":29, "name":"__acl_global_id_1", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_id_1"}]}, {"type":"interface", "id":30, "name":"__acl_global_id_2", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_id_2"}]}, {"type":"interface", "id":31, "name":"__acl_global_offset_0", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_offset_0"}]}, {"type":"interface", "id":32, "name":"__acl_global_offset_1", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_offset_1"}]}, {"type":"interface", "id":33, "name":"__acl_global_offset_2", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_offset_2"}]}]}, {"type":"memtype", "id":1, "name":"Global Memory", "children":[{"type":"memsys", "id":34, "name":"0", "details":[{"type":"table", "Number of banks":"1"}]}]}, {"type":"interface", "id":28, "name":"__acl_global_id_0", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_id_0"}]}, {"type":"interface", "id":29, "name":"__acl_global_id_1", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_id_1"}]}, {"type":"interface", "id":30, "name":"__acl_global_id_2", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_id_2"}]}, {"type":"interface", "id":31, "name":"__acl_global_offset_0", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_offset_0"}]}, {"type":"interface", "id":32, "name":"__acl_global_offset_1", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_offset_1"}]}, {"type":"interface", "id":33, "name":"__acl_global_offset_2", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_offset_2"}]}, {"type":"interface", "id":25, "name":"__acl_global_size_0", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_size_0"}]}, {"type":"interface", "id":26, "name":"__acl_global_size_1", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_size_1"}]}, {"type":"interface", "id":27, "name":"__acl_global_size_2", "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"table", "Stable":"No", "Width":"64 bits", "Kernel":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E", "Port Name":"ZTSZZ9VectorAddRN4sycl3_V15queueERKSt6vectorIiSaIiEES7_RS5_ENKUlRNS0_7handlerEE_clESA_EUlT_E___acl_global_size_2"}]}], "links":[{"from":10, "to":7}, {"from":8, "to":11}, {"from":7, "to":12, "reverse":2}, {"from":13, "to":7}, {"from":16, "to":7}, {"from":17, "to":7}, {"from":20, "to":7}, {"from":21, "to":7}, {"from":24, "to":7}, {"from":28, "to":7}, {"from":4, "to":8}, {"from":5, "to":8}, {"from":6, "to":8}, {"from":7, "to":4}, {"from":7, "to":5}, {"from":4, "to":6}, {"from":5, "to":6}, {"from":34, "to":4}, {"from":34, "to":5}, {"from":6, "to":34}]};
var loopsJSON={"columns":["", "Pipelined", "II", "Speculated iterations", "Details"], "children":[{"name":"Kernel: \'lambda\'(auto)", "data":["", "", ""], "debug":[[{"filename":"C:\\Users\\24746\\source\\repos\\Base_Vector_Add/src\\vector-add-buffers.cpp", "line":87}]], "details":[{"type":"brief", "text":"ND-Range"}, {"type":"text", "text":"ND-Range"}, {"type":"text", "text":"fMAX bottleneck block: None"}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Kernels", "link":"file:///C:/Program Files (x86)/Intel/oneAPI/compiler/latest/windows/lib/oclfpga/aoc_help_pages/ipp1476408832230.html"}]}]}]};
var loop_attrJSON={"name":"loop_attributes", "id":28, "nodes":[{"name":"\'lambda\'(auto)", "id":1, "clk":"No", "fmax":"480.00", "type":"kernel", "children":[{"name":"\'lambda\'(auto).B0", "id":2, "af":"480.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"126.000000", "mi":"n/a", "pl":"Yes", "tc":"0", "tn":"1", "type":"bb"}]}]};
var summaryJSON={"performanceSummary":{"name":"Kernel Summary", "columns":["Kernel Name", "Kernel Type", "Autorun", "Workgroup Size", "# Compute Units", "Hyper-Optimized Handshaking"], "children":[{"name":"\'lambda\'(auto)", "data":["NDRange", "No", "n/a", 1, "On"], "details":[{"type":"text", "text":"Kernel type: NDRange"}, {"type":"text", "text":"The kernel does not use any work-group information (such as get_local_id() or get_group_id()).Local work-group size will be automatically modified to match global work-group size on launch.This is a hardware optimization."}], "debug":[[{"filename":"", "line":0}]]}]}, "estimatedResources":{"name":"Estimated Resource Usage", "columns":["Kernel Name", "ALUTs ", "FFs  ", "RAMs ", "DSPs ", "MLABs"], "children":[{"name":"\'lambda\'(auto)", "data":[2275, 2876, 8, 0, 22], "debug":[[{"filename":"", "line":0}]]}, {"name":"Total", "classes":["summary-highlight", "nohover"], "data":[2275, 2876, 8, 0, 22], "data_percent":[0.233477, 0.147578, 0.112518, 0]}, {"name":"Available", "classes":["summary-highlight", "nohover"], "data":[974400, 1948800, 7110, 4510, 0]}]}, "compileWarnings":{"name":"Compile Warnings", "children":[]}};
var warningsJSON={"nodes":[]};
var fileJSON=[{"path":"c:/Users/24746/source/repos/Base_Vector_Add/src/vector-add-buffers.cpp", "name":"vector-add-buffers.cpp", "has_active_debug_locs":false, "absName":"c:/Users/24746/source/repos/Base_Vector_Add/src/vector-add-buffers.cpp", "content":"//==============================================================\u000A// Vector Add is the equivalent of a Hello, World! sample for data parallel\u000A// programs. Building and running the sample verifies that your development\u000A// environment is setup correctly and demonstrates the use of the core features\u000A// of SYCL. This sample runs on both CPU and GPU (or FPGA). When run, it\u000A// computes on both the CPU and offload device, then compares results. If the\u000A// code executes on both CPU and offload device, the device name and a success\u000A// message are displayed. And, your development environment is setup correctly!\u000A//\u000A// For comprehensive instructions regarding SYCL Programming, go to\u000A// https://software.intel.com/en-us/oneapi-programming-guide and search based on\u000A// relevant terms noted in the comments.\u000A//\u000A// SYCL material used in the code sample:\u000A// •\tA one dimensional array of data.\u000A// •\tA device queue, buffer, accessor, and kernel.\u000A//==============================================================\u000A// Copyright © Intel Corporation\u000A//\u000A// SPDX-License-Identifier: MIT\u000A// =============================================================\u000A#include <sycl/sycl.hpp>\u000A#include <vector>\u000A#include <iostream>\u000A#include <string>\u000A#if FPGA_HARDWARE || FPGA_EMULATOR || FPGA_SIMULATOR\u000A#include <sycl/ext/intel/fpga_extensions.hpp>\u000A#endif\u000A\u000Ausing namespace sycl;\u000A\u000A// num_repetitions: How many times to repeat the kernel invocation\u000Asize_t num_repetitions = 1;\u000A// Vector type and data size for this example.\u000Asize_t vector_size = 10000;\u000Atypedef std::vector<int> IntVector; \u000A\u000A// Create an exception handler for asynchronous SYCL exceptions\u000Astatic auto exception_handler = [](sycl::exception_list e_list) {\u000A  for (std::exception_ptr const &e : e_list) {\u000A    try {\u000A      std::rethrow_exception(e);\u000A    }\u000A    catch (std::exception const &e) {\u000A#if _DEBUG\u000A      std::cout << \"Failure\" << std::endl;\u000A#endif\u000A      std::terminate();\u000A    }\u000A  }\u000A};\u000A\u000A//************************************\u000A// Vector add in SYCL on device: returns sum in 4th parameter \"sum_parallel\".\u000A//************************************\u000Avoid VectorAdd(queue &q, const IntVector &a_vector, const IntVector &b_vector,\u000A               IntVector &sum_parallel) {\u000A  // Create the range object for the vectors managed by the buffer.\u000A  range<1> num_items{a_vector.size()};\u000A\u000A  // Create buffers that hold the data shared between the host and the devices.\u000A  // The buffer destructor is responsible to copy the data back to host when it\u000A  // goes out of scope.\u000A  buffer a_buf(a_vector);\u000A  buffer b_buf(b_vector);\u000A  buffer sum_buf(sum_parallel.data(), num_items);\u000A\u000A  for (size_t i = 0; i < num_repetitions; i++ ) {\u000A\u000A    // Submit a command group to the queue by a lambda function that contains the\u000A    // data access permission and device computation (kernel).\u000A    q.submit([&](handler &h) {\u000A      // Create an accessor for each buffer with access permission: read, write or\u000A      // read/write. The accessor is a mean to access the memory in the buffer.\u000A      accessor a(a_buf, h, read_only);\u000A      accessor b(b_buf, h, read_only);\u000A  \u000A      // The sum_accessor is used to store (with write permission) the sum data.\u000A      accessor sum(sum_buf, h, write_only, no_init);\u000A  \u000A      // Use parallel_for to run vector addition in parallel on device. This\u000A      // executes the kernel.\u000A      //    1st parameter is the number of work items.\u000A      //    2nd parameter is the kernel, a lambda that specifies what to do per\u000A      //    work item. The parameter of the lambda is the work item id.\u000A      // SYCL supports unnamed lambda kernel by default.\u000A      h.parallel_for(num_items, [=](auto i) { sum[i] = a[i] + b[i]; });\u000A    });\u000A  };\u000A  // Wait until compute tasks on GPU done\u000A  q.wait();\u000A}\u000A\u000A//************************************\u000A// Initialize the vector from 0 to vector_size - 1\u000A//************************************\u000Avoid InitializeVector(IntVector &a) {\u000A  for (size_t i = 0; i < a.size(); i++) a.at(i) = i;\u000A}\u000A\u000A//************************************\u000A// Demonstrate vector add both in sequential on CPU and in parallel on device.\u000A//************************************\u000Aint main(int argc, char* argv[]) {\u000A  // Change num_repetitions if it was passed as argument\u000A  if (argc > 2) num_repetitions = std::stoi(argv[2]);\u000A  // Change vector_size if it was passed as argument\u000A  if (argc > 1) vector_size = std::stoi(argv[1]);\u000A  // Create device selector for the device of your interest.\u000A#if FPGA_EMULATOR\u000A  // Intel extension: FPGA emulator selector on systems without FPGA card.\u000A  auto selector = sycl::ext::intel::fpga_emulator_selector_v;\u000A#elif FPGA_SIMULATOR\u000A  // Intel extension: FPGA simulator selector on systems without FPGA card.\u000A  auto selector = sycl::ext::intel::fpga_simulator_selector_v;\u000A#elif FPGA_HARDWARE\u000A  // Intel extension: FPGA selector on systems with FPGA card.\u000A  auto selector = sycl::ext::intel::fpga_selector_v;\u000A#else\u000A  // The default device selector will select the most performant device.\u000A  auto selector = default_selector_v;\u000A#endif\u000A\u000A  // Create vector objects with \"vector_size\" to store the input and output data.\u000A  IntVector a, b, sum_sequential, sum_parallel;\u000A  a.resize(vector_size);\u000A  b.resize(vector_size);\u000A  sum_sequential.resize(vector_size);\u000A  sum_parallel.resize(vector_size);\u000A\u000A  // Initialize input vectors with values from 0 to vector_size - 1\u000A  InitializeVector(a);\u000A  InitializeVector(b);\u000A\u000A  try {\u000A    queue q(selector, exception_handler);\u000A\u000A    // Print out the device information used for the kernel code.\u000A    std::cout << \"Running on device: \"\u000A              << q.get_device().get_info<info::device::name>() << \"\\n\";\u000A    std::cout << \"Vector size: \" << a.size() << \"\\n\";\u000A\u000A    // Vector addition in SYCL\u000A    VectorAdd(q, a, b, sum_parallel);\u000A  } catch (exception const &e) {\u000A    std::cout << \"An exception is caught for vector add.\\n\";\u000A    std::terminate();\u000A  }\u000A\u000A  // Compute the sum of two vectors in sequential for validation.\u000A  for (size_t i = 0; i < sum_sequential.size(); i++)\u000A    sum_sequential.at(i) = a.at(i) + b.at(i);\u000A\u000A  // Verify that the two vectors are equal.  \u000A  for (size_t i = 0; i < sum_sequential.size(); i++) {\u000A    if (sum_parallel.at(i) != sum_sequential.at(i)) {\u000A      std::cout << \"Vector add failed on device.\\n\";\u000A      return -1;\u000A    }\u000A  }\u000A\u000A  int indices[]{0, 1, 2, (static_cast<int>(a.size()) - 1)};\u000A  constexpr size_t indices_size = sizeof(indices) / sizeof(int);\u000A\u000A  // Print out the result of vector add.\u000A  for (int i = 0; i < indices_size; i++) {\u000A    int j = indices[i];\u000A    if (i == indices_size - 1) std::cout << \"...\\n\";\u000A    std::cout << \"[\" << j << \"]: \" << a[j] << \" + \" << b[j] << \" = \"\u000A              << sum_parallel[j] << \"\\n\";\u000A  }\u000A\u000A  a.clear();\u000A  b.clear();\u000A  sum_sequential.clear();\u000A  sum_parallel.clear();\u000A\u000A  std::cout << \"Vector add successfully completed on device.\\n\";\u000A  return 0;\u000A}\u000A"}];
var alpha_viewer=false;